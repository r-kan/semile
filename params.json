{
  "name": "semile",
  "tagline": "profile what you care, monitor how it goes",
  "body": "# semile :)\r\n_Why semile?_  \r\n_We semile bcoz it helps overcome the flaw/bottleneck of our programs_\r\n\r\n***\r\n\r\n#What is _semile_?  \r\nA profiling framework that provides the ability to monitor programs, in general of any programming language, by the following two pieces of information:  \r\n1. consumed time per execution  \r\n2. 'footprint' debug message per execution  \r\n\r\n#Difference with other profiling tools?  \r\n* **_Profile 'semantically'_**  Each call to the same function plays its individual role within profiling. Normal 'syntactic' profilers are good in other aspects but fail to achieve this.  \r\n* **_Lightweight_**  The profiled program gives little run-time overhead. The viewer is compact that targets to provide only necessary information without fancy visual effect. It gives profile result in widespread PNG and XML format.  \r\n* **_Message-embedded profile_**  Custom information can be left within profile elements. It then also provides the ability to help reveal internal state/decision inside the program.  \r\n\r\nP.S. The user-provided semantic specifications (via the profile library) is necessary for semantic profile  \r\n\r\n# System Requirement\r\npython3 (viewer)  \r\ng++ (c/cpp profile library)  \r\n\r\n# Dependent Library\r\n<a href=\"http://www.graphviz.org\" target=\"_blank\">dot (graphviz)</a>    \r\n\r\n***\r\n\r\n# Viewer Demonstration \r\n<a href=\"https://raw.githubusercontent.com/r-kan/r-kan.github.io/master/images/semile/sample.png\" target=\"_blank\"><img border=\"0\" alt=\"semile viewer PNG format sample\" src=\"https://raw.githubusercontent.com/r-kan/r-kan.github.io/master/images/semile/sample.png\" width=\"616\" height=\"117\"></a>  \r\n(PNG format)  \r\n  \r\n<a href=\"https://raw.githubusercontent.com/r-kan/r-kan.github.io/master/images/semile/sample_xml.png\" target=\"_blank\"><img border=\"0\" alt=\"semile viewer PNG format sample\" src=\"https://raw.githubusercontent.com/r-kan/r-kan.github.io/master/images/semile/sample_xml.png\" width=\"252\" height=\"188\"></a>  \r\n(XML format, browse by <a href=\"http://codebeautify.org/xmlviewer\" target=\"_blank\">codebeautify.org/xmlviewer</a>))\r\n\r\n***\r\n\r\n# Profile Library  \r\n`semile` does not aim to profile all program execution, it only profile the execution specified via the profile library. Currently, cpp profile library is provided.  \r\n\r\n# Tutorial: profile a cpp program  \r\n1. Choose the statements to be profiled  \r\n2. Have a `SEMILE` in same scope of the statements  \r\n\r\nAnd that's it!  \r\n\r\nIn particular, a helpful way diagnosing is use `SEMILE_MSG` to leave custom footprint message.  \r\n\r\n# Code example    \r\n```c++\r\nvoid quicksort(vector<int>& x, int start_pos, int end_pos)\r\n{\r\n  SEMILE; // profile at beginning of the scope\r\n  // SEMILE_N(abc); // or profile with custom name\r\n  ...\r\n}\r\n```\r\nHere, every _quicksort_ execution will be profiled.  \r\nNested, or recursive `SEMILE` is also possible.\r\n\r\n```c++\r\nvoid quicksort(vector<int>& x, int start_pos, int end_pos)\r\n{\r\n  SEMILE;\r\n  SEMILE_MSG(GetStr(x, start_pos, end_pos));\r\n  ...\r\n  int pivot = start_pos;\r\n  SEMILE_MSG(\"pivot: \" + GetStr(x[pivot]) + \"\\\\n\");\r\n  ...\r\n  Swap(x, i, j);  \r\n  SEMILE_MSG(GetStr(x[i]) + \" <=> \" + GetStr(x[j]) + \"\\\\n\");\r\n}\r\n```\r\nAfter `SEMILE`, we can have `SEMILE_MSG` at any time to log profile message.  \r\nHere, internal flow of _quicksort_ is revealed and combined to resulted profile.  \r\n  \r\nOne possible viewer generated PNG is then as follows:  \r\n(run quicksort 3 times with random inputs)  \r\n<a href=\"https://raw.githubusercontent.com/r-kan/r-kan.github.io/master/images/semile/profile_quicksort.png\" target=\"_blank\"><img border=\"0\" alt=\"the viewer generated PNG for quicksort\" src=\"https://raw.githubusercontent.com/r-kan/r-kan.github.io/master/images/semile/profile_quicksort.png\" width=\"616\" height=\"161\"></a>  \r\n  \r\n  \r\n***\r\nExcept c++, `semile` also profiles c sources via the c interface.\r\n\r\n# Tutorial: exploit the c interface \r\nDue to the lack of RAII, `semile` support in c requires a pair of profile specifications:  \r\n1. `SEMILE_BEGIN`, where profile resource is allocated   \r\n2. `SEMILE_END`, where profile resource is released  \r\n\r\n# Code example  \r\n```c\r\nvoid quicksort(int* x, int start_pos, int end_pos)\r\n{\r\n  void* inst = SEMILE_BEGIN;\r\n  SEMILE_MSG_C(inst, GetStr(x, start_pos, end_pos));\r\n  ...\r\n  SEMILE_END(inst);\r\n}\r\n```\r\n\r\nIt takes much care to handle `SEMILE_END`. However, be able to control directly the profile instance also gives much flexibility, e.g., conditional profile:\r\n\r\n```c\r\nvoid* inst = NULL;\r\nif (is_cared_run) {\r\n  inst = SEMILE_BEGIN;\r\n}\r\n...\r\nSEMILE_END(inst);\r\n```\r\n\r\n***\r\nTwo ways are provided to disable profile:  \r\n1. compile time: -DSEMILE_DISABLE in compiler option   \r\n2. run time: setenv SEMILE_ENABLE 0  \r\n\r\n***\r\n\r\n# Contact  \r\nPlease contact <a href='http://r-kan.github.io'>*Rodney Kan*</a> by its_right@msn.com for any question/request/bug without hesitation. \r\n<script>\r\n  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\r\n  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\r\n  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\r\n  })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');\r\n\r\n  ga('create', 'UA-71836859-3', 'auto');\r\n  ga('send', 'pageview');\r\n\r\n</script>",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}